%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!successful-parse
name: invoke-closure can call a closure in the environment
module:
  inputs:
    exit: !s0!closure
      branches:
        return: {}
  statements: []
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters: {}

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: invoke-closure needs a source
module:
  inputs:
    exit: !s0!closure
      branches:
        return: {}
  statements: []
  invocation:
    !s0!invoke-closure
    branch: return
    parameters: {}

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: invoke-closure needs a branch
module:
  inputs:
    exit: !s0!closure
      branches:
        return: {}
  statements: []
  invocation:
    !s0!invoke-closure
    src: exit
    parameters: {}

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: invoke-closure needs a parameters
module:
  inputs:
    exit: !s0!closure
      branches:
        return: {}
  statements: []
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: invoke-closure cannot call a missing environment entry
module:
  inputs: {}
  statements: []
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters: {}

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: invoke-closure cannot call a missing branch
module:
  inputs:
    exit: !s0!closure
      branches:
        return: {}
  statements: []
  invocation:
    !s0!invoke-closure
    src: exit
    branch: abort
    parameters: {}

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: invoke-closure cannot call an atom
module:
  inputs: {}
  statements:
    - !s0!create-atom
      dest: exit
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters: {}

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: invoke-closure cannot call a literal
module:
  inputs: {}
  statements:
    - !s0!create-literal
      dest: exit
      content: stuff
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters: {}

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: invoke-closure cannot call a method
module:
  inputs: {}
  statements:
    - !s0!create-method
      dest: exit
      self-input: self
      body:
        inputs:
          exit: !s0!closure
            branches:
              return: {}
        statements: []
        invocation:
          !s0!invoke-closure
          src: exit
          branch: return
          parameters: {}
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters: {}

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!successful-parse
name: The name of a closure parameter can change
module:
  inputs:
    x: !s0!any {}
    exit: !s0!closure
      branches:
        return:
          y: !s0!any {}
  statements: []
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: y

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!successful-parse
name: The name of a closure parameter doesn't need to change
module:
  inputs:
    x: !s0!any {}
    exit: !s0!closure
      branches:
        return:
          x: !s0!any {}
  statements: []
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: x

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!successful-parse
name: All of the closure parameter renamings happen "at the same time"
module:
  inputs:
    x: !s0!any {}
    y: !s0!any {}
    exit: !s0!closure
      branches:
        return:
          x: !s0!any {}
          y: !s0!any {}
  statements: []
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: y
      y: x

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: There cannot be multiple closure parameters with the same "from" name
module:
  inputs:
    x: !s0!any {}
    exit: !s0!closure
      branches:
        return:
          x: !s0!any {}
          y: !s0!any {}
  statements: []
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: x
      x: y

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: There cannot be multiple closure parameters with the same "to" name
module:
  inputs:
    x: !s0!any {}
    y: !s0!any {}
    exit: !s0!closure
      branches:
        return:
          x: !s0!any {}
  statements: []
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: x
      y: x

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: invoke-closure must provide a parameter for each input
module:
  inputs:
    exit: !s0!closure
      branches:
        return:
          x: !s0!any {}
  statements: []
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters: {}

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: invoke-closure parameter must satisfy input type
module:
  inputs:
    x: !s0!any {}
    exit: !s0!closure
      branches:
        return:
          x: !s0!closure
            branches:
              abort: {}
  statements: []
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: x

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: invoke-closure cannot provide extra parameters
module:
  inputs:
    x: !s0!any {}
    exit: !s0!closure
      branches:
        return: {}
  statements: []
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: x

# TODO - invoke-closure cannot call an object
