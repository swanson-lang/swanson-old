%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!successful-parse
name: create-closure can create a new environment entry
module:
  inputs:
    exit: !s0!closure
      branches:
        return:
          x: !s0!any {}
  statements:
    - !s0!create-closure
      dest: x
      closed-over: []
      branches:
        body:
          inputs:
            exit: !s0!closure
              branches:
                return: {}
          statements: []
          invocation:
            !s0!invoke-closure
            src: exit
            branch: return
            parameters: {}
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: x

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!successful-parse
name: create-closure can close over an environment entry
module:
  inputs:
    exit: !s0!closure
      branches:
        return:
          x: !s0!any {}
    y: !s0!any {}
  statements:
    - !s0!create-closure
      dest: x
      # We close over `y`, removing it from the containing environment.
      closed-over: [y]
      branches:
        body:
          inputs:
            exit: !s0!closure
              branches:
                return:
                  # We need to make sure our `exit` continuation can discharge
                  # the `y` that we've closed over.
                  y: !s0!any {}
          statements: []
          invocation:
            !s0!invoke-closure
            src: exit
            branch: return
            parameters:
              # Inside of the closure, `y` is available, so we need to hand it
              # off to `exit` to discharge it.
              y: y
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      # Since we closed over `y` above, it should not be part of the parameter
      # list here, since it's been moved from our environment into the closure's
      # internal closed-over environment.
      x: x

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: create-closure needs a destination
module:
  inputs:
    exit: !s0!closure
      branches:
        return:
          x: !s0!any {}
  statements:
    - !s0!create-closure
      closed-over: []
      branches:
        body:
          inputs:
            exit: !s0!closure
              branches:
                return: {}
          statements: []
          invocation:
            !s0!invoke-closure
            src: exit
            branch: return
            parameters: {}
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: x

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: create-closure needs a closure set
module:
  inputs:
    exit: !s0!closure
      branches:
        return:
          x: !s0!any {}
  statements:
    - !s0!create-closure
      dest: x
      branches:
        body:
          inputs:
            exit: !s0!closure
              branches:
                return: {}
          statements: []
          invocation:
            !s0!invoke-closure
            src: exit
            branch: return
            parameters: {}
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: x

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: create-closure needs a branches section
module:
  inputs:
    exit: !s0!closure
      branches:
        return:
          x: !s0!any {}
  statements:
    - !s0!create-closure
      dest: x
      closed-over: []
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: x

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: create-closure needs at least one branch
module:
  inputs:
    exit: !s0!closure
      branches:
        return:
          x: !s0!any {}
  statements:
    - !s0!create-closure
      dest: x
      closed-over: []
      branches: {}
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: x

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: create-closure cannot overwrite an input
module:
  inputs:
    x: !s0!any {}
    exit: !s0!closure
      branches:
        return:
          x: !s0!any {}
  statements:
    - !s0!create-closure
      dest: x
      closed-over: []
      branches:
        body:
          inputs:
            exit: !s0!closure
              branches:
                return: {}
          statements: []
          invocation:
            !s0!invoke-closure
            src: exit
            branch: return
            parameters: {}
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: x

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: create-closure cannot overwrite an existing environment entry
module:
  inputs:
    exit: !s0!closure
      branches:
        return:
          x: !s0!any {}
  statements:
    - !s0!create-closure
      dest: x
      closed-over: []
      branches:
        body:
          inputs:
            exit: !s0!closure
              branches:
                return: {}
          statements: []
          invocation:
            !s0!invoke-closure
            src: exit
            branch: return
            parameters: {}
    - !s0!create-closure
      dest: x
      closed-over: []
      branches:
        body:
          inputs:
            exit: !s0!closure
              branches:
                return: {}
          statements: []
          invocation:
            !s0!invoke-closure
            src: exit
            branch: return
            parameters: {}
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: x

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: create-closure closure set cannot contain duplicates
module:
  inputs:
    exit: !s0!closure
      branches:
        return:
          x: !s0!any {}
  statements:
    - !s0!create-closure
      dest: x
      closed-over:
        - x
        - x
      branches:
        body:
          inputs:
            exit: !s0!closure
              branches:
                return: {}
          statements: []
          invocation:
            !s0!invoke-closure
            src: exit
            branch: return
            parameters: {}
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: x

%TAG !s0! tag:swanson-lang.org,2016:
---
!s0!invalid-parse
name: create-closure branch list cannot contain duplicates
module:
  inputs:
    exit: !s0!closure
      branches:
        return:
          x: !s0!any {}
  statements:
    - !s0!create-closure
      dest: x
      closed-over: []
      branches:
        body:
          inputs:
            exit: !s0!closure
              branches:
                return: {}
          statements: []
          invocation:
            !s0!invoke-closure
            src: exit
            branch: return
            parameters: {}
        body:
          inputs:
            exit: !s0!closure
              branches:
                return: {}
          statements: []
          invocation:
            !s0!invoke-closure
            src: exit
            branch: return
            parameters: {}
  invocation:
    !s0!invoke-closure
    src: exit
    branch: return
    parameters:
      x: x
